{
  "widgetsBundle": {
    "alias": "bota_",
    "title": "BOTAŞ",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "kamera_bilgilerini_d_zenle",
      "name": "Kamera Bilgilerini Düzenle",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.camera.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-edit-camera\" layout=\"column\" style=\"height:100%\" ng-cloak>\n    <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\" ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Yetki Hatası</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Su anki kullanıcının yetkileriyle Kamera Bilgilerini Düzenle araç takımını kullanamazsınız. \n            </div>\n            \n            <span>\n                Lütfen başka bir kullanıcıyla giriş yapın.\n            </span>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Kamera Listesi</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"camera in cameras\">\n                    <div class=\"md-list-item-text\">\n                        <span><b>{{camera.name}}:</b> {{camera.brand}} - {{camera.model}} ({{camera.host}})</span>\n                    </div>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"edit(camera)\">\n                        <ng-md-icon icon=\"edit\"></ng-md-icon>\n                    </md-button>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"delete(camera)\">\n                        <ng-md-icon icon=\"delete\"></ng-md-icon>\n                    </md-button>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>{{selectedCamera.name}} kamerasının bilgilerini düzenliyorsunuz</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <form name=\"theForm\">\n                <md-list>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.name</label>\n                            <input required name=\"name\" ng-model=\"selectedCamera.name\">\n                        </md-input-container>\n            \n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.type</label>\n                            <input required name=\"type\" ng-model=\"selectedCamera.type\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.brand</label>\n                            <input required name=\"brand\" ng-model=\"selectedCamera.brand\">\n                        </md-input-container>\n            \n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.model</label>\n                            <input required name=\"model\" ng-model=\"selectedCamera.model\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.host</label>\n                            <input required name=\"host\" ng-model=\"selectedCamera.host\">\n                        </md-input-container>\n            \n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.port</label>\n                            <input name=\"port\" ng-model=\"selectedCamera.port\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.primary-url-path</label>\n                            <input required name=\"primaryUrlPath\" ng-model=\"selectedCamera.primaryUrlPath\">\n                        </md-input-container>\n            \n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.secondary-url-path</label>\n                            <input required name=\"secondaryUrlPath\" ng-model=\"selectedCamera.secondaryUrlPath\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-checkbox class=\"md-block\" ng-model=\"selectedCamera.ptz\"></md-checkbox>\n                        <label translate>camera.is-controllable</label>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-checkbox class=\"md-block\" ng-model=\"selectedCamera.rtspAuth\"></md-checkbox>\n                        <label translate>camera.is-rtsp-auth</label>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.username</label>\n                            <input name=\"username\" ng-model=\"selectedCamera.username\">\n                        </md-input-container>\n            \n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.password</label>\n                            <input name=\"password\" ng-model=\"selectedCamera.password\">\n                        </md-input-container>\n                    </md-list-item>\n                    \n                    \n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom\">\n                            <label translate>camera.channel-no</label>\n                            <input name=\"channelNo\" ng-model=\"selectedCamera.channelNo\">\n                        </md-input-container>\n                        <md-input-container class=\"md-block  no-margin-bottom\">\n                            <label translate>camera.description</label>\n                            <textarea ng-model=\"selectedCamera.additionalInfo.description\" rows=\"2\"></textarea>\n                        </md-input-container>\n                    </md-list-item>\n                </md-list>\n            </form>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\" ng-click=\"save(selectedCamera)\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel()\">İptal</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }",
        "controllerScript": "const limit = 20;\nconst widgetRootId = 'widget-container-edit-camera';\n\nself.user = undefined;\nself.cameras = [];\nself.userService = new UserService($http, $q);\nself.cameraService = new CameraService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    \n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.cameras = [];\n    \n    self.ctx.$scope.edit = function(camera) {\n        startEditing(camera);\n    }\n    \n    self.ctx.$scope.delete = function(camera) {\n        showDeleteCameraConfirmation(camera);\n    }\n    \n    self.ctx.$scope.save = function(camera) {\n        saveCamera(camera);\n    }\n    \n    self.ctx.$scope.cancel = function() {\n        cancelEditing();\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n\n    const cameraCreateCallback = () => {\n        setTimeout(function(){refreshCameras();}, 300);\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.CREATE, cameraCreateCallback);\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            if (validateUser()) {\n                getCameras();\n            }\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction startEditing(camera) {\n    self.ctx.$scope.selectedCamera = camera;\n    self.ctx.$scope.startEditing = true;\n}\n\nfunction cancelEditing() {\n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.selectedCamera = undefined;\n}\n\nfunction refreshCameras() {\n    clearCameras();\n    getCameras();\n}\n\nfunction clearCameras() {\n    self.cameras = [];\n    self.ctx.$scope.cameras = [];\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction getCameras() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const successCallback = (data) => {\n        self.cameras = self.cameras.concat(data.data);\n        self.ctx.$scope.cameras = self.cameras;\n        if (data.hasNext) {\n            self.cameraService.getCameras(data.nextPageLink, customerId, successCallback, failureCallback);\n        }\n    };\n\n    const failureCallback = () => {\n        clearCameras();\n        showGetCamerasErrorAlert();\n    };\n\n    self.cameraService.getCameras(pageLink, customerId, successCallback, failureCallback);\n}\n\nfunction showGetCamerasErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kamera listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction showDeleteCameraConfirmation(camera) {\n\n    const successCallback = (data) => {\n        showDeleteSuccess(camera);\n        refreshCameras();\n    };\n\n    const failureCallback = () => {\n        showDeleteCameraErrorAlert(camera);\n    };\n\n    const confirmCallback = () => {\n        self.cameraService.deleteCamera(camera, successCallback, failureCallback);\n    };\n\n    const rejectCallback = () => {};\n\n    self.uiUtils.showConfirmationAlert(\n        'Uyarı',\n        camera.name + ' isimli kamerayı silmek istediğinize emin misiniz?',\n        'Sil',\n        'İptal',\n        confirmCallback,\n        rejectCallback\n    );\n}\n\nfunction showDeleteSuccess(camera) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        camera.name + ' kamerası başarıyla silindi!'\n    );\n}\n\nfunction showDeleteCameraErrorAlert(camera) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        camera.name + ' kamerası silinirken bir hata oluştu. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nfunction saveCamera(camera) {\n    const successCallback = (data) => {\n        showEditSuccess(camera);\n        cancelEditing();\n        refreshCameras();\n    };\n\n    const failureCallback = () => {\n        showSaveCameraErrorAlert(camera);\n    }\n\n    self.cameraService.saveCamera(camera, successCallback, failureCallback);\n}\n\nfunction showEditSuccess(camera) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        camera.name + ' kamerası başarıyla güncellendi!'\n    );\n}\n\nfunction showSaveCameraErrorAlert(camera) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        camera.name + ' kamerasının düzenlemeleri kaydedilemedi. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nself.onDestroy = function() {\n}",
        "settingsSchema": "",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Kamera Bilgilerini Düzenle\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "kamera_olu_tur",
      "name": "Kamera Oluştur",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.camera.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-create-camera\" layout=\"column\" style=\"height:100%\" ng-cloak>\n        <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\" ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <h3>\n                        <span>Yetki Hatası</span>\n                    </h3>\n                </div>\n            </md-toolbar>\n            <md-content flex layout-padding>\n                <div class=\"md-list-item-text\">\n                    Kullanıcı bilgileri çekilemedi.\n                </div>\n    \n                <span>\n                    Lütfen tekrar giriş yapın.\n                </span>\n            </md-content>\n        </div>\n        <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser\" ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <span>Yeni Kamera Bilgileri</span>\n                </div>\n            </md-toolbar>\n            <md-content flex>\n                <form name=\"theForm\">\n                    <md-list>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.name</label>\n                                <input required name=\"name\" ng-model=\"camera.name\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.type</label>\n                                <input required name=\"type\" ng-model=\"camera.type\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.brand</label>\n                                <input required name=\"brand\" ng-model=\"camera.brand\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.model</label>\n                                <input required name=\"model\" ng-model=\"camera.model\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.host</label>\n                                <input required name=\"host\" ng-model=\"camera.host\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.port</label>\n                                <input name=\"port\" ng-model=\"camera.port\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.primary-url-path</label>\n                                <input required name=\"primaryUrlPath\" ng-model=\"camera.primaryUrlPath\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.secondary-url-path</label>\n                                <input required name=\"secondaryUrlPath\" ng-model=\"camera.secondaryUrlPath\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-checkbox class=\"md-block\" ng-model=\"camera.ptz\"></md-checkbox>\n                            <label translate>camera.is-controllable</label>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-checkbox class=\"md-block\" ng-model=\"camera.rtspAuth\"></md-checkbox>\n                            <label translate>camera.is-rtsp-auth</label>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.username</label>\n                                <input name=\"username\" ng-model=\"camera.username\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.password</label>\n                                <input name=\"password\" ng-model=\"camera.password\">\n                            </md-input-container>\n                        </md-list-item>\n    \n    \n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>camera.channel-no</label>\n                                <input name=\"channelNo\" ng-model=\"camera.channelNo\">\n                            </md-input-container>\n                            <md-input-container class=\"md-block  no-margin-bottom\">\n                                <label translate>camera.description</label>\n                                <textarea ng-model=\"camera.additionalInfo.description\"></textarea>\n                            </md-input-container>\n                        </md-list-item>\n                    </md-list>\n                </form>\n            </md-content>\n            <md-divider inset></md-divider>\n            <md-content>\n                <div layout=\"row\">\n                    <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\" ng-click=\"save()\">Kaydet</md-button>\n                    <md-button class=\"md-secondary\" ng-click=\"cancel()\">Temizle</md-button>\n                </div>\n            </md-content>\n        </div>\n    </div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }",
        "controllerScript": "const limit = 10;\nconst widgetRootId = 'widget-container-create-camera';\n\nself.user = undefined;\nself.userService = new UserService($http, $q);\nself.cameraService = new CameraService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n\n    self.ctx.$scope.cancel = function() {\n        self.ctx.$scope.camera = {};\n    }\n    \n    self.ctx.$scope.save = function() {\n        let camera = self.ctx.$scope.camera;\n        saveCamera(camera);\n    }\n\n    getCurrentUser();\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            validateUser();\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user);\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction saveCamera(camera) {\n    const successCallback = (savedCamera) => {\n        assignCamera(savedCamera, self.user.customerId.id);\n    };\n\n    const failureCallback = () => {\n        self.cameraService.deleteCamera(camera, function (){},  function() {});\n        showSaveErrorAlert(camera);\n    };\n\n    self.cameraService.saveCamera(camera, successCallback, failureCallback);\n}\n\nfunction assignCamera(camera, customerId) {\n    const successCallback = (assignedCamera) => {\n        showSuccessToast(assignedCamera);\n    };\n\n    const failureCallback = () => {\n        showAssignmentErrorAlert(camera);\n    };\n\n    self.customerService.assignCameraToCustomer(camera.id.id, customerId, successCallback, failureCallback);\n}\n\nfunction showSaveErrorAlert(error) {\n    self.uiUtils.showDissmissAlert(\n        'Kayıt Hatası',\n        'Kamera oluşturulurken bir hata oluştu. Lütfen tekrar deneyin!',\n        'Tamam'\n    );\n}\n\nfunction showAssignmentErrorAlert(error) {\n    self.uiUtils.showDissmissAlert(\n        'Kayıt Hatası',\n        'Oluşturulan kamera kullanıcıya atanırken bir hata oluştu. Lütfen tekrar deneyin!',\n        'Tamam'\n    );\n}\n\nfunction showSuccessToast(camera) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        camera.name + ' isimli kamera başarıyla yaratıldı.'\n    );\n}\n\nself.onDestroy = function() {}",
        "settingsSchema": "",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Kamera Oluştur\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "kameray_kullan_c_grubuna_ata",
      "name": "Kamera Kullanıcılarını Yönet",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.camera.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-manage-camera-customers\" layout=\"column\" style=\"height:100%\" ng-cloak>\n        <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Yetki Hatası</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Su anki kullanıcının yetkileriyle Kamera Kullanıcılarını Yönet araç takımını kullanamazsınız. \n            </div>\n            \n            <span>\n                Lütfen başka bir kullanıcıyla giriş yapın.\n            </span>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Kamera Listesi</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"camera in cameras\">\n                    <div class=\"md-list-item-text\">\n                        <span><b>{{camera.name}}:</b> {{camera.brand}} - {{camera.model}} ({{camera.host}})</span>\n                    </div>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"manageAssignedCustomers(camera)\"><ng-md-icon icon=\"edit\"></ng-md-icon></md-button>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>{{selectedCamera.name}} kamerasına erişebilecek kullanıcı gruplarını seçin</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"customer in customers\">\n                    <div class=\"md-list-item-text\">\n                        <span>{{customer.name}}</span>\n                    </div>\n                    <md-checkbox class=\"md-secondary\" ng-model=\"customer.isSelected\"></md-checkbox>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-click=\"save(selectedCamera, customers)\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel(selectedCamera, customers)\">İptal</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>",
        "templateCss": "",
        "controllerScript": "const limit = 20;\nconst widgetRootId = 'widget-container-manage-camera-customers';\n\nself.user = undefined;\nself.cameras = [];\nself.customers = [];\nself.userService = new UserService($http, $q);\nself.cameraService = new CameraService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    self.ctx.$scope.startEditing = false;\n    \n    self.ctx.$scope.manageAssignedCustomers = function(camera) {\n        startEditing(camera);\n    }\n    \n    self.ctx.$scope.save = function(selectedCamera, customers) {\n        applyCameraCustomersChange(selectedCamera, customers);\n    }\n    \n    self.ctx.$scope.cancel = function(selectedCamera, customers) {\n        cancelEditing(selectedCamera, customers);\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n    const cameraUpdateCallback = () => {\n        setTimeout(function(){refreshCameras();}, 300);\n    };\n\n    const customerUpdateCallback = () => {\n        setTimeout(function(){refreshCustomers();}, 300);\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.CREATE, cameraUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.DELETE, cameraUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.UPDATE, cameraUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.CREATE, customerUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.DELETE, customerUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.UPDATE, customerUpdateCallback);\n}\n\nfunction cancelEditing(selectedCamera ,customers) {\n    self.ctx.$scope.customers = prepareCustomers(selectedCamera, customers);\n    self.ctx.$scope.startEditing = false;\n}\n\nfunction getCurrentUser() {\n    const success = (data) => {\n        self.user = data;\n        if (validateUser()) {\n            getCameras();\n            getCustomers();\n        }\n    };\n\n    const fail = () => {\n        self.user = undefined;\n            validateUser();\n    };\n\n    self.userService.getCurrentUser(success, fail);\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction getCameras() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const success = (data) => {\n        self.cameras = self.cameras.concat(data.data);\n        self.ctx.$scope.cameras = self.cameras;\n        if (data.hasNext) {\n            self.cameraService.getCameras(data.nextPageLink, customerId, success, fail);\n        }\n    };\n\n    const fail = () => {\n        clearCameras();\n        showGetCamerasErrorAlert();\n    };\n\n    self.cameraService.getCameras(pageLink, customerId, success, fail);\n}\n\nfunction clearCameras() {\n    self.cameras = [];\n    self.ctx.$scope.cameras = [];\n}\n\nfunction refreshCameras() {\n    clearCameras();\n    getCameras();\n}\n\nfunction showGetCamerasErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kamera listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction getCustomers() {\n    let pageLink = {limit: limit};\n\n    const success = (data) => {\n        self.customers = self.customers.concat(data.data);\n        if (self.ctx.$scope.selectedCamera) {\n            self.ctx.$scope.customers = prepareCustomers(self.ctx.$scope.selectedCamera, self.customers);\n        } else {\n            self.ctx.$scope.customers = self.customers;\n        }\n        if (data.hasNext) {\n            self.customerService.getCustomers(data.nextPageLink, success, fail);\n        }\n    };\n\n    const fail = () => {\n        clearCustomers();\n        showGetCustomersErrorAlert();\n    };\n\n    self.customerService.getCustomers(pageLink, success, fail);\n}\n\nfunction clearCustomers() {\n    self.customers = [];\n    self.ctx.$scope.customers = [];\n}\n\nfunction refreshCustomers() {\n    clearCustomers();\n    getCustomers();\n}\n\nfunction showGetCustomersErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kullanıcı grupları çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction startEditing(camera) {\n    self.ctx.$scope.selectedCamera = camera;\n    self.ctx.$scope.startEditing = true;\n    self.ctx.$scope.customers = prepareCustomers(camera, self.customers);\n}\n\nfunction prepareCustomers(camera, customers) {\n    for (var customer of customers) {\n        customer.isSelected = false;\n        for (var assignedCustomer of camera.assignedCustomers) {\n            if (customer.id.id === assignedCustomer.customerId.id) {\n               customer.isSelected = true;\n            }\n        }\n    }\n    return customers;\n}\n\nfunction applyCameraCustomersChange(camera, customers) {\n    var assignedCustomers = [];\n    for (var customer of customers) {\n        if (customer.isSelected) {\n            assignedCustomers.push(customer.id.id);\n        }\n    }\n    updateCameraCustomers(camera, assignedCustomers);\n}\n\nfunction updateCameraCustomers(camera, assignedCustomers) {\n    const success = (data) => {\n        cancelEditing(camera, self.customers);\n        refreshCustomers();\n        refreshCameras();\n        showSuccessToast(data);\n    };\n\n    const fail = () => {\n        refreshCustomers();\n        refreshCameras();\n        showUpdateCameraCustomersErrorAlert();\n    };\n\n    self.customerService.updateCameraCustomers(camera.id.id, assignedCustomers, success, fail);\n}\n\nfunction showSuccessToast(camera) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        camera.name + ' adlı kameraya erişebilecek kullanıcı grupları başarıyla güncellendi.'\n    );\n}\n\nfunction showUpdateCameraCustomersErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kameraya erişebilecek kullanıcı grupları güncellenirken bir hata oluştu. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Kamera Kullanıcılarını Yönet\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "kameray_nvr_la_e_le_tir",
      "name": "NVR Kameralarını Yönet",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.camera.service.js"
          },
          {
            "url": "/static/widget.nvr.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-manage-nvr-cameras\" layout=\"column\" style=\"height:100%\" ng-cloak>\n        <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\" md-scroll-shrink ng-if=\"true\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Yetki Hatası</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Su anki kullanıcının yetkileriyle 'NVR Kameralarını Yönet' araç takımını kullanamazsınız. \n            </div>\n            \n            <span>\n                Lütfen başka bir kullanıcıyla giriş yapın.\n            </span>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>NVR Listesi</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"nvr in nvrs\">\n                    <div class=\"md-list-item-text\">\n                        <span><b>{{nvr.name}}:</b> {{nvr.brand}} - {{nvr.model}} ({{nvr.ip}})</span>\n                    </div>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"manageRelatedCameras(nvr)\"><ng-md-icon icon=\"edit\"></ng-md-icon></md-button>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>{{selectedNvr.name}} NVR'ının kaydedeceği kameraları seçin</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"camera in cameras\">\n                    <div class=\"md-list-item-text\">\n                        <span>{{camera.name}}</span>\n                    </div>\n                    <md-checkbox class=\"md-secondary\" ng-model=\"camera.isRelated\"></md-checkbox>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-click=\"save(selectedNvr, cameras)\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel()\">İptal</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>\n",
        "templateCss": "",
        "controllerScript": "const widgetRootId = 'widget-container-manage-nvr-cameras';\nconst limit = 20;\n\nself.user = undefined;\nself.nvrs = [];\nself.cameras = [];\nself.relatableCameras = [];\nself.cameraNvrs = {}\nself.selectedNvr = null;\nself.selectedNvrCameras = [];\nself.userService = new UserService($http, $q);\nself.nvrService = new NvrService($http, $q);\nself.cameraService = new CameraService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    self.ctx.$scope.startEditing = false;\n    \n    self.ctx.$scope.manageRelatedCameras = function(nvr) {\n        showNvrCameraManagement(nvr);\n    }\n    \n    self.ctx.$scope.save = function(selectedNvr, cameras) {\n        applyChanges(selectedNvr, cameras);\n    }\n    \n    self.ctx.$scope.cancel = function() {\n        cancelEditing();\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n    const nvrUpdateCallback = () => {\n        setTimeout(function(){refreshNvrs();}, 300);\n    };\n\n    const cameraUpdateCallback = () => {\n        refreshCameras();\n        setTimeout(\n            function() {\n                if (self.ctx.$scope.startEditing) {\n                    showNvrCameraManagement(self.ctx.$scope.selectedNvr);\n                }\n            }, \n            300\n        );\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.CREATE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.DELETE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.UPDATE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.CREATE, cameraUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.DELETE, cameraUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CAMERA, EventType.UPDATE, cameraUpdateCallback);\n}\n\nfunction getCurrentUser() {\n    const success = (data) => {\n        self.user = data;\n        if (validateUser()) {\n            getNvrs();\n            getCameras();\n        }\n    };\n\n    const fail = () => {\n        self.user = undefined;\n        validateUser();\n    };\n\n    self.userService.getCurrentUser(success, fail);\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction cancelEditing() {\n    clearSelections();\n    self.ctx.$scope.startEditing = false;\n}\n\nfunction clearSelections() {\n    self.selectedNvr = null;\n    self.selectedNvrCameras = [];\n}\n\nfunction refreshCameras() {\n    clearCameras();\n    getCameras();\n}\n\nfunction clearCameras() {\n    self.ctx.$scope.cameras = [];\n    self.cameras = [];\n    self.relatableCameras = [];\n}\n\nfunction getCameras() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const success = (data) => {\n        self.cameras = self.cameras.concat(data.data);\n        if (data.hasNext) {\n            self.cameraService.getCameras(data.nextPageLink, customerId, success, fail);\n        } else {\n            getCameraNvrs();\n        }\n    };\n\n    const fail = () => {\n        clearCameras();\n        showGetCamerasErrorAlert();\n    };\n\n    self.cameraService.getCameras(pageLink, customerId, success, fail);\n}\n\nfunction getCameraNvrs() {\n\n    const success = (cameraNvrMap) => {\n        self.cameraNvrs = cameraNvrMap;\n    };\n\n    const fail = () => {\n        self.cameraNvrs = {};\n    };\n\n    self.cameraService.getCameraNvrs(self.cameras, success, fail);\n}\n\nfunction refreshNvrs() {\n    clearNvrs();\n    getNvrs();\n}\n\nfunction clearNvrs() {\n    self.nvrs = [];\n    self.ctx.$scope.nvrs = [];\n}\n\nfunction getNvrs() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const success = (data) => {\n        self.nvrs = self.nvrs.concat(data.data);\n        self.ctx.$scope.nvrs = self.nvrs;\n        if (data.hasNext) {\n            self.nvrService.getNvrs(data.nextPageLink, customerId, success, fail);\n        }\n    };\n\n    const fail = () => {\n        clearNvrs();\n        showGetNvrsErrorAlert();\n    };\n\n    self.nvrService.getNvrs(pageLink, customerId, success, fail);\n}\n\nfunction showNvrCameraManagement(nvr) {\n    self.selectedNvr = nvr;\n    self.ctx.$scope.selectedNvr = self.selectedNvr;\n    getCamerasByNvr(self.selectedNvr);\n}\n\nfunction getCamerasByNvr(nvr) {\n    const success = (data) => {\n        self.selectedNvrCameras = data;\n        applyRelations(self.selectedNvrCameras);\n        prepareRelatableCameras(self.selectedNvr);\n        startEditing();\n    };\n\n    const fail = () => {\n        cancelEditing();\n        refreshCameras();\n        refreshNvrs();\n        showNvrCameraManagementErrorAlert(nvr);\n    };\n\n    self.nvrService.getCamerasByNvr(nvr.id.id, success, fail);\n}\n\nfunction applyRelations(relatedCameras) {\n    for (var camera of self.cameras) {\n        camera.isRelated = false;\n        for (var relatedCamera of relatedCameras) {\n            if (relatedCamera.id.id === camera.id.id) {\n                camera.isRelated = true;\n            }\n        }\n    }\n}\n\nfunction prepareRelatableCameras(nvr) {\n    self.relatableCameras = [];\n    for (var camera of self.cameras) {\n        var n = self.cameraNvrs[camera.id.id];\n        if (!n || (n && n.id.id === nvr.id.id) ) {\n            self.relatableCameras.push(camera);\n        }\n    }\n}\n\nfunction startEditing() {\n    self.ctx.$scope.startEditing = true;\n    self.ctx.$scope.cameras = self.relatableCameras;\n}\n\nfunction applyChanges(selectedNvr, selectedCameras) {\n    let relatedCameras = getRelatedCameras(selectedCameras);\n    let newRelatedCameras = getNewRelatedCameras(relatedCameras);\n    let deletedRelations = getDeletedRelatedCameras(relatedCameras);\n\n    const success = (data) => {\n        clearSelections();\n        refreshCameras();\n        refreshNvrs();\n        showSuccessToast(selectedNvr);\n        cancelEditing();\n    };\n\n    const fail = () => {\n\n    };\n    self.nvrService.executeAllRelationTasks(selectedNvr, newRelatedCameras, deletedRelations, success, fail);\n}\n\nfunction getRelatedCameras(selectedCameras) {\n    var relatedCameras = [];\n    for (var camera of selectedCameras) {\n        if (camera.isRelated) {\n            relatedCameras.push(camera);\n        }\n    }\n    return relatedCameras;\n}\n\nfunction getNewRelatedCameras(relatedCameras) {\n    var cameras = [];\n    for (var camera of relatedCameras) {\n        var contains =  false;\n        for (var c of self.selectedNvrCameras) {\n            contains = contains || (c.id.id === camera.id.id)\n        }\n        if (!contains) {\n            cameras.push(camera);\n        }\n    }\n    return cameras;\n}\n\nfunction getDeletedRelatedCameras(relatedCameras) {\n    var cameras = [];\n    for (var camera of self.selectedNvrCameras) {\n        var contains =  false;\n        for (var c of relatedCameras) {\n            contains = contains || (c.id.id === camera.id.id)\n        }\n        if (!contains) {\n            cameras.push(camera);\n        }\n    }\n    return cameras;\n}\n\nfunction showNvrCameraManagementErrorAlert(nvr) {\n    self.uiUtils.showDismissAlert(\n        'Bir Hata Oluştu',\n        nvr.name + ' isimli NVR\\'ın kaydettiği kameralar listelenemedi. Lütfen tekrar deneyin!',\n        'Tamam'\n    );\n}\n\nfunction showGetNvrsErrorAlert() {\n    self.uiUtils.showDismissAlert(\n        'Bir Hata Oluştu',\n        'Nvr listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction showGetCamerasErrorAlert() {\n    self.uiUtils.showDismissAlert(\n        'Bir Hata Oluştu',\n        'Kamera listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction showSuccessToast(nvr) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        nvr.name + ' adlı NVR\\'ın kaydedeceği kameralar başarıyla güncellendi.'\n    );\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"NVR Kameralarını Yönet\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "kullan_c_grubu_olu_tur",
      "name": "Kullanıcı Grubu Oluştur",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-create-customer\" layout=\"column\" style=\"height:100%\"\n    ng-cloak>\n    <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3>\n                    <span>Yetki Hatası</span>\n                </h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Kullanıcı bilgileri çekilemedi.\n            </div>\n\n            <span>\n                    Lütfen tekrar giriş yapın.\n                </span>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>Yeni Kullanıcı Grubu Bilgileri</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <form name=\"theForm\">\n                <md-list>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom full-width\">\n                            <label translate>customer.title</label>\n                            <input required name=\"name\" ng-model=\"customer.title\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom full-width\">\n                            <label translate>customer.description</label>\n                            <textarea ng-model=\"customer.additionalInfo.description\"></textarea>\n                        </md-input-container>\n                    </md-list-item>\n                </md-list>\n            </form>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\"\n                    ng-click=\"save()\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel()\">Temizle</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }\n.full-width { width: 100%; }",
        "controllerScript": "const widgetRootId = 'widget-container-create-customer';\n\nself.user = undefined;\nself.userService = new UserService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    \n    self.ctx.$scope.cancel = function() {\n        self.ctx.$scope.customer = {};\n    }\n    \n    self.ctx.$scope.save = function() {\n        let customer = self.ctx.$scope.customer;\n        saveCustomer(customer);\n    }\n\n    getCurrentUser();\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            validateUser();\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user);\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction saveCustomer(customer) {\n    const successCallback = (savedCustomer) => {\n        showSuccessToast(savedCustomer);\n    };\n\n    const failureCallback = () => {\n        showSaveCustomerFailureAlert();\n    };\n\n    self.customerService.saveCustomer(customer, successCallback, failureCallback);\n}\n\nfunction showSaveCustomerFailureAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Hata',\n        'Bir hata oluştu ve kullanıcı grubu oluşturulamadı. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nfunction showSuccessToast(customer) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        customer.title + ' isimli kullanıcı grubu başarıyla yaratıldı.'\n    );\n}\n\nself.onDestroy = function() {}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Kullanıcı Grubu Oluştur\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "kullan_c_gruplar_n_y_net",
      "name": "Kullanıcı Gruplarını Yönet",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-edit-customer\" layout=\"column\" style=\"height:100%\" ng-cloak>\n    <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\" ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Yetki Hatası</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Kullanıcı bilgileri çekilemedi. Lütfen tekrardan giriş yapın.\n            </div>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Kullanıcı Grubu Listesi</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"customer in customers\">\n                    <div class=\"md-list-item-text\">\n                        <span><b>{{customer.title}}</b></span>\n                    </div>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"edit(customer)\">\n                        <ng-md-icon icon=\"edit\"></ng-md-icon>\n                    </md-button>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"delete(customer)\">\n                        <ng-md-icon icon=\"delete\"></ng-md-icon>\n                    </md-button>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>{{selectedCustomer.name}} kullanıcı grubunun bilgilerini düzenliyorsunuz</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <form name=\"theForm\">\n                <md-list>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom full-width\">\n                            <label translate>customer.title</label>\n                            <input required name=\"name\" ng-model=\"selectedCustomer.title\">\n                        </md-input-container>\n                    </md-list-item>\n                    <md-list-item>\n                        <md-input-container class=\"md-block no-margin-bottom full-width\">\n                            <label translate>customer.description</label>\n                            <textarea ng-model=\"selectedCustomer.additionalInfo.description\"></textarea>\n                        </md-input-container>\n                    </md-list-item>\n                </md-list>\n            </form>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\" ng-click=\"save(selectedCustomer)\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel()\">İptal</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }\n.full-width { width: 100%; }",
        "controllerScript": "const limit = 20;\nconst widgetRootId = 'widget-container-edit-customer';\n\nself.user = undefined;\nself.customers = [];\nself.userService = new UserService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    \n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.customers = [];\n    \n    self.ctx.$scope.edit = function(customer) {\n        startEditing(customer);\n    }\n    \n    self.ctx.$scope.delete = function(customer) {\n        showDeleteCustomerConfirmation(customer);\n    }\n    \n    self.ctx.$scope.save = function(customer) {\n        saveCustomer(customer);\n    }\n    \n    self.ctx.$scope.cancel = function() {\n        cancelEditing();\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n    const customerCreateCallback = () => {\n        refreshCustomers();\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.CREATE, customerCreateCallback);\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            if (validateUser()) {\n                getCustomers();\n            }\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction startEditing(customer) {\n    self.ctx.$scope.selectedCustomer = customer;\n    self.ctx.$scope.startEditing = true;\n}\n\nfunction cancelEditing() {\n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.selectedCustomer = undefined;\n}\n\nfunction refreshCustomers() {\n    clearCustomers();\n    getCustomers();\n}\n\nfunction clearCustomers() {\n    self.customers = [];\n    self.ctx.$scope.customers = [];\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction getCustomers() {\n    let pageLink = {limit: limit};\n\n    const successCallback = (data) => {\n        self.customers = self.customers.concat(data.data);\n        self.ctx.$scope.customers = self.customers;\n        if (data.hasNext) {\n            self.customerService.getCustomers(data.nextPageLink, successCallback, failureCallback);\n        }\n    };\n\n    const failureCallback = () => {\n        clearCustomers();\n        showGetCustomersErrorAlert();\n    };\n\n    self.customerService.getCustomers(pageLink, successCallback, failureCallback);\n}\n\nfunction showGetCustomersErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kullanıcı grubu listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction showDeleteCustomerConfirmation(customer) {\n\n    const successCallback = (data) => {\n        showDeleteSuccess(customer);\n        refreshCustomers();\n    };\n\n    const failureCallback = () => {\n        showDeleteCustomerErrorAlert(customer);\n    };\n\n    const confirmCallback = () => {\n        self.customerService.deleteCustomer(customer, successCallback, failureCallback);\n    };\n\n    const rejectCallback = () => {};\n\n    self.uiUtils.showConfirmationAlert(\n        'Uyarı',\n        customer.name + ' isimli kullanıcı grubunu silmek istediğinize emin misiniz?',\n        'Sil',\n        'İptal',\n        confirmCallback,\n        rejectCallback\n    );\n}\n\nfunction showDeleteSuccess(customer) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        customer.name + ' kullanıcı grubu başarıyla silindi!'\n    );\n}\n\nfunction showDeleteCustomerErrorAlert(customer) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        customer.name + ' kullanıcı grubu silinirken bir hata oluştu. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nfunction saveCustomer(customer) {\n    const successCallback = (data) => {\n        showEditSuccess(customer);\n        cancelEditing();\n        refreshCustomers();\n    };\n\n    const failureCallback = () => {\n        showSaveCustomerErrorAlert(customer);\n    }\n\n    self.customerService.saveCustomer(customer, successCallback, failureCallback);\n}\n\nfunction showEditSuccess(customer) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        customer.name + ' kullanıcı grubu başarıyla güncellendi!'\n    );\n}\n\nfunction showSaveCustomerErrorAlert(customer) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        customer.name + ' kullanıcı grubunun düzenlemeleri kaydedilemedi. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nself.onDestroy = function() {\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"Kullanıcı Gruplarını Yönet\",\"dropShadow\":true}"
      }
    },
    {
      "alias": "nvr_bilgilerini_d_zenle",
      "name": "NVR Bilgilerini Düzenle",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.nvr.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-edit-nvr\" layout=\"column\" style=\"height:100%\" ng-cloak>\n        <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\" ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <h3><span>Yetki Hatası</span></h3>\n                </div>\n            </md-toolbar>\n            <md-content flex layout-padding>\n                <div class=\"md-list-item-text\">\n                    Su anki kullanıcının yetkileriyle NVR Bilgilerini Düzenle araç takımını kullanamazsınız. \n                </div>\n                \n                <span>\n                    Lütfen başka bir kullanıcıyla giriş yapın.\n                </span>\n            </md-content>\n        </div>\n        <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n            ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <h3><span>NVR Listesi</span></h3>\n                </div>\n            </md-toolbar>\n            <md-content flex>\n                <md-list>\n                    <md-list-item class=\"secondary-button-padding\" ng-repeat=\"nvr in nvrs\">\n                        <div class=\"md-list-item-text\">\n                            <span><b>{{nvr.name}}:</b> {{nvr.brand}} - {{nvr.model}} ({{nvr.ip}})</span>\n                        </div>\n                        <md-button class=\"md-icon-button md-secondary\" ng-click=\"edit(nvr)\">\n                            <ng-md-icon icon=\"edit\"></ng-md-icon>\n                        </md-button>\n                        <md-button class=\"md-icon-button md-secondary\" ng-click=\"delete(nvr)\">\n                            <ng-md-icon icon=\"delete\"></ng-md-icon>\n                        </md-button>\n                        <md-divider inset></md-divider>\n                    </md-list-item>\n                </md-list>\n            </md-content>\n        </div>\n        <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n            ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <span>{{selectedNvr.name}} isimli NVR'ın bilgilerini düzenliyorsunuz</span>\n                </div>\n            </md-toolbar>\n            <md-content flex>\n                <form name=\"theForm\">\n                    <md-list>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.name</label>\n                                <input required name=\"name\" ng-model=\"selectedNvr.name\">\n                            </md-input-container>\n                \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.type</label>\n                                <input required name=\"type\" ng-model=\"selectedNvr.type\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.brand</label>\n                                <input required name=\"brand\" ng-model=\"selectedNvr.brand\">\n                            </md-input-container>\n                \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.model</label>\n                                <input required name=\"model\" ng-model=\"selectedNvr.model\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.host</label>\n                                <input required name=\"host\" ng-model=\"selectedNvr.ip\">\n                            </md-input-container>\n                \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.port</label>\n                                <input name=\"port\" ng-model=\"selectedNvr.port\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.username</label>\n                                <input name=\"username\" ng-model=\"selectedNvr.username\">\n                            </md-input-container>\n                \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.password</label>\n                                <input name=\"password\" ng-model=\"selectedNvr.password\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block  no-margin-bottom\">\n                                <label translate>nvr.description</label>\n                                <textarea ng-model=\"selectedNvr.additionalInfo.description\" rows=\"2\"></textarea>\n                            </md-input-container>\n                        </md-list-item>\n                    </md-list>\n                </form>\n            </md-content>\n            <md-divider inset></md-divider>\n            <md-content>\n                <div layout=\"row\">\n                    <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\" ng-click=\"save(selectedNvr)\">Kaydet</md-button>\n                    <md-button class=\"md-secondary\" ng-click=\"cancel()\">İptal</md-button>\n                </div>\n            </md-content>\n        </div>\n    </div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }",
        "controllerScript": "const limit = 20;\nconst widgetRootId = 'widget-container-edit-nvr';\n\nself.user = undefined;\nself.nvrs = [];\nself.userService = new UserService($http, $q);\nself.nvrService = new NvrService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    \n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.nvrs = [];\n    \n    self.ctx.$scope.edit = function(nvr) {\n        startEditing(nvr);\n    }\n    \n    self.ctx.$scope.delete = function(nvr) {\n        showDeleteNvrConfirmation(nvr);\n    }\n    \n    self.ctx.$scope.save = function(nvr) {\n        saveNvr(nvr);\n    }\n    \n    self.ctx.$scope.cancel = function() {\n        cancelEditing();\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n\n    const nvrCreateCallback = () => {\n        setTimeout(function(){refreshNvrs();}, 300);\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.CREATE, nvrCreateCallback);\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            if (validateUser()) {\n                getNvrs();\n            }\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction startEditing(nvr) {\n    self.ctx.$scope.selectedNvr = nvr;\n    self.ctx.$scope.startEditing = true;\n}\n\nfunction cancelEditing() {\n    self.ctx.$scope.startEditing = false;\n    self.ctx.$scope.selectedNvr = undefined;\n}\n\nfunction refreshNvrs() {\n    clearNvrs();\n    getNvrs();\n}\n\nfunction clearNvrs() {\n    self.nvrs = [];\n    self.ctx.$scope.nvrs = [];\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction getNvrs() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const successCallback = (data) => {\n        self.nvrs = self.nvrs.concat(data.data);\n        self.ctx.$scope.nvrs = self.nvrs;\n        if (data.hasNext) {\n            self.nvrService.getNvrs(data.nextPageLink, customerId, successCallback, failureCallback);\n        }\n    };\n\n    const failureCallback = () => {\n        clearNvrs();\n        showGetNvrsErrorAlert();\n    };\n\n    self.nvrService.getNvrs(pageLink, customerId, successCallback, failureCallback);\n}\n\nfunction showGetNvrsErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'NVR listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction showDeleteNvrConfirmation(nvr) {\n\n    const successCallback = (data) => {\n        showDeleteSuccess(nvr);\n        refreshNvrs();\n    };\n\n    const failureCallback = () => {\n        showDeleteNvrErrorAlert(nvr);\n    };\n\n    const confirmCallback = () => {\n        self.nvrService.deleteNvr(nvr, successCallback, failureCallback);\n    };\n\n    const rejectCallback = () => {};\n\n    self.uiUtils.showConfirmationAlert(\n        'Uyarı',\n        nvr.name + ' NVR\\'ını silmek istediğinize emin misiniz?',\n        'Sil',\n        'İptal',\n        confirmCallback,\n        rejectCallback\n    );\n}\n\nfunction showDeleteSuccess(nvr) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        nvr.name + ' NVR\\'ı başarıyla silindi!'\n    );\n}\n\nfunction showDeleteNvrErrorAlert(nvr) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        nvr.name + ' NVR\\'ı silinirken bir hata oluştu. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nfunction saveNvr(nvr) {\n    const successCallback = (data) => {\n        showEditSuccess(nvr);\n        cancelEditing();\n        refreshNvrs();\n    };\n\n    const failureCallback = () => {\n        showSaveNvrErrorAlert(nvr);\n    }\n\n    self.nvrService.saveNvr(nvr, successCallback, failureCallback);\n}\n\nfunction showEditSuccess(nvr) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        nvr.name + ' NVR\\'ı başarıyla güncellendi!'\n    );\n}\n\nfunction showSaveNvrErrorAlert(nvr) {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        nvr.name + ' NVR\\'ının düzenlemeleri kaydedilemedi. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nself.onDestroy = function() {\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"NVR Bilgilerini Düzenle\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "nvr_kullan_c_grubuna_ata",
      "name": "NVR Kullanıcılarını Yönet",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.user.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          },
          {
            "url": "/static/widget.nvr.service.js"
          },
          {
            "url": "/static/widget.camera.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-manage-nvr-customers\" layout=\"column\" style=\"height:100%\" ng-cloak>\n    <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>Yetki Hatası</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex layout-padding>\n            <div class=\"md-list-item-text\">\n                Su anki kullanıcının yetkileriyle 'NVR Kullanıcılarını Yönet' araç takımını kullanamazsınız. \n            </div>\n            \n            <span>\n                Lütfen başka bir kullanıcıyla giriş yapın.\n            </span>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && !startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <h3><span>NVR Listesi</span></h3>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"nvr in nvrs\">\n                    <div class=\"md-list-item-text\">\n                        <span><b>{{nvr.name}}:</b> {{nvr.brand}} - {{nvr.model}} ({{nvr.ip}})</span>\n                    </div>\n                    <md-button class=\"md-icon-button md-secondary\" ng-click=\"manageAssignedCustomers(nvr)\"><ng-md-icon icon=\"edit\"></ng-md-icon></md-button>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n    </div>\n    <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser && startEditing\"\n        ng-cloak>\n        <md-toolbar class=\"md-small\">\n            <div class=\"md-toolbar-tools\">\n                <span>{{selectedNvr.name}} NVR'ına erişebilecek kullanıcı gruplarını seçin</span>\n            </div>\n        </md-toolbar>\n        <md-content flex>\n            <md-list>\n                <md-list-item class=\"secondary-button-padding\" ng-repeat=\"customer in customers\">\n                    <div class=\"md-list-item-text\">\n                        <span>{{customer.name}}</span>\n                    </div>\n                    <md-checkbox class=\"md-secondary\" ng-model=\"customer.isSelected\"></md-checkbox>\n                    <md-divider inset></md-divider>\n                </md-list-item>\n            </md-list>\n        </md-content>\n        <md-divider inset></md-divider>\n        <md-content>\n            <div layout=\"row\">\n                <md-button class=\"md-primary\" ng-click=\"save(selectedNvr, customers)\">Kaydet</md-button>\n                <md-button class=\"md-secondary\" ng-click=\"cancel(selectedNvr, customers)\">İptal</md-button>\n            </div>\n        </md-content>\n    </div>\n</div>",
        "templateCss": "",
        "controllerScript": "const limit = 20;\nconst widgetRootId = 'widget-container-manage-nvr-customers';\n\nself.user = undefined;\nself.nvrs = [];\nself.customers = [];\nself.userService = new UserService($http, $q);\nself.nvrService = new NvrService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n    self.ctx.$scope.startEditing = false;\n    \n    self.ctx.$scope.manageAssignedCustomers = function(nvr) {\n        startEditing(nvr);\n    }\n    \n    self.ctx.$scope.save = function(selectedNvr, customers) {\n        applyNvrCustomersChange(selectedNvr, customers);\n    }\n    \n    self.ctx.$scope.cancel = function(selectedNvr, customers) {\n        cancelEditing(selectedNvr, customers);\n    }\n\n    subscribeToEvents();\n    getCurrentUser();\n}\n\nfunction subscribeToEvents() {\n    const nvrUpdateCallback = () => {\n        setTimeout(function(){refreshNvrs();}, 300);\n    };\n\n    const customerUpdateCallback = () => {\n        setTimeout(function(){refreshCustomers();}, 300);\n    };\n\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.CREATE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.DELETE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.NVR, EventType.UPDATE, nvrUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.CREATE, customerUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.DELETE, customerUpdateCallback);\n    NotificationUtils.subscribeTo(self.ctx.$scope, EntityType.CUSTOMER, EventType.UPDATE, customerUpdateCallback);\n}\n\nfunction cancelEditing(selectedNvr ,customers) {\n    self.ctx.$scope.customers = prepareCustomers(selectedNvr, customers);\n    self.ctx.$scope.startEditing = false;\n}\n\nfunction getCurrentUser() {\n    const success = (data) => {\n        self.user = data;\n        if (validateUser()) {\n            getNvrs();\n            getCustomers();\n        }\n    };\n\n    const fail = () => {\n        self.user = undefined;\n            validateUser();\n    };\n\n    self.userService.getCurrentUser(success, fail);\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user) && self.user.authority === 'CUSTOMER_USER';\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction getNvrs() {\n    let pageLink = {limit: limit};\n    let customerId = self.user.customerId.id;\n\n    const success = (data) => {\n        self.nvrs = self.nvrs.concat(data.data);\n        self.ctx.$scope.nvrs = self.nvrs;\n        if (data.hasNext) {\n            self.nvrService.getNvrs(data.nextPageLink, customerId, success, fail);\n        }\n    };\n\n    const fail = () => {\n        clearNvrs();\n        showGetNvrsErrorAlert();\n    };\n\n    self.nvrService.getNvrs(pageLink, customerId, success, fail);\n}\n\nfunction clearNvrs() {\n    self.nvrs = [];\n    self.ctx.$scope.nvrs = [];\n}\n\nfunction refreshNvrs() {\n    clearNvrs();\n    getNvrs();\n}\n\nfunction showGetNvrsErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'NVR listesi çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction getCustomers() {\n    let pageLink = {limit: limit};\n\n    const success = (data) => {\n        self.customers = self.customers.concat(data.data);\n        if (self.ctx.$scope.selectedNvr) {\n            self.ctx.$scope.customers = prepareCustomers(self.ctx.$scope.selectedNvr, self.customers);\n        } else {\n            self.ctx.$scope.customers = self.customers;\n        }\n        if (data.hasNext) {\n            self.customerService.getCustomers(data.nextPageLink, success, fail);\n        }\n    };\n\n    const fail = () => {\n        clearCustomers();\n        showGetCustomersErrorAlert();\n    };\n\n    self.customerService.getCustomers(pageLink, success, fail);\n}\n\nfunction clearCustomers() {\n    self.customers = [];\n    self.ctx.$scope.customers = [];\n}\n\nfunction refreshCustomers() {\n    clearCustomers();\n    getCustomers();\n}\n\nfunction showGetCustomersErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'Kullanıcı grupları çekilirken bir hata oluştu. Lütfen tekrardan giriş yapın.',\n        'Tamam'\n    );\n}\n\nfunction startEditing(nvr) {\n    self.ctx.$scope.selectedNvr = nvr;\n    self.ctx.$scope.startEditing = true;\n    self.ctx.$scope.customers = prepareCustomers(nvr, self.customers);\n}\n\nfunction prepareCustomers(nvr, customers) {\n    for (var customer of customers) {\n        customer.isSelected = false;\n        for (var assignedCustomer of nvr.assignedCustomers) {\n            if (customer.id.id === assignedCustomer.customerId.id) {\n               customer.isSelected = true;\n            }\n        }\n    }\n    return customers;\n}\n\nfunction applyNvrCustomersChange(nvr, customers) {\n    var assignedCustomers = [];\n    for (var customer of customers) {\n        if (customer.isSelected) {\n            assignedCustomers.push(customer.id.id);\n        }\n    }\n    updateNvrCustomers(nvr, assignedCustomers);\n}\n\nfunction updateNvrCustomers(nvr, assignedCustomers) {\n    const success = (data) => {\n        cancelEditing(nvr, self.customers);\n        refreshCustomers();\n        refreshNvrs();\n        showSuccessToast(data);\n    };\n\n    const fail = () => {\n        refreshCustomers();\n        refreshNvrs();\n        showUpdateNvrCustomersErrorAlert();\n    };\n\n    self.customerService.updateNvrCustomers(nvr.id.id, assignedCustomers, success, fail);\n}\n\nfunction showSuccessToast(nvr) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        nvr.name + ' adlı NVR\\'a erişebilecek kullanıcı grupları başarıyla güncellendi.'\n    );\n}\n\nfunction showUpdateNvrCustomersErrorAlert() {\n    self.uiUtils.showDissmissAlert(\n        'Bir Hata Oluştu',\n        'NVR\\'a erişebilecek kullanıcı grupları güncellenirken bir hata oluştu. Lütfen tekrar deneyin.',\n        'Tamam'\n    );\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"required\": [\"cardHtml\"],\n        \"properties\": {\n            \"cardCss\": {\n                \"title\": \"CSS\",\n                \"type\": \"string\",\n                \"default\": \".card {\\n font-weight: bold; \\n}\"\n            },\n            \"cardHtml\": {\n                \"title\": \"HTML\",\n                \"type\": \"string\",\n                \"default\": \"<div class='card'>HTML code here</div>\"\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"cardCss\",\n            \"type\": \"css\"\n        },           \n        {\n            \"key\": \"cardHtml\",\n            \"type\": \"html\"\n        }    \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"NVR Kullanıcılarını Yönet\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "nvr_olu_tur",
      "name": "NVR Oluştur",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [
          {
            "url": "/static/widget.utils.js"
          },
          {
            "url": "/static/widget.nvr.service.js"
          },
          {
            "url": "/static/widget.customer.service.js"
          },
          {
            "url": "/static/widget.user.service.js"
          }
        ],
        "templateHtml": "<div id=\"widget-container-create-nvr\" layout=\"column\" style=\"height:100%\" ng-cloak>\n        <div layout=\"column\" style=\"height:100%\" ng-hide=\"isValidUser\" ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <h3>\n                        <span>Yetki Hatası</span>\n                    </h3>\n                </div>\n            </md-toolbar>\n            <md-content flex layout-padding>\n                <div class=\"md-list-item-text\">\n                    Kullanıcı bilgileri çekilemedi.\n                </div>\n    \n                <span>\n                    Lütfen tekrar giriş yapın.\n                </span>\n            </md-content>\n        </div>\n        <div layout=\"column\" style=\"height:100%\" ng-show=\"isValidUser\" ng-cloak>\n            <md-toolbar class=\"md-small\">\n                <div class=\"md-toolbar-tools\">\n                    <span>Yeni NVR Bilgileri</span>\n                </div>\n            </md-toolbar>\n            <md-content flex>\n                <form name=\"theForm\">\n                    <md-list>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.name</label>\n                                <input required name=\"name\" ng-model=\"nvr.name\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.type</label>\n                                <input required name=\"type\" ng-model=\"nvr.type\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.brand</label>\n                                <input required name=\"brand\" ng-model=\"nvr.brand\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.model</label>\n                                <input required name=\"model\" ng-model=\"nvr.model\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.host</label>\n                                <input required name=\"ip\" ng-model=\"nvr.ip\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.port</label>\n                                <input name=\"port\" ng-model=\"nvr.port\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.username</label>\n                                <input name=\"username\" ng-model=\"nvr.username\">\n                            </md-input-container>\n    \n                            <md-input-container class=\"md-block no-margin-bottom\">\n                                <label translate>nvr.password</label>\n                                <input name=\"password\" ng-model=\"nvr.password\">\n                            </md-input-container>\n                        </md-list-item>\n                        <md-list-item>\n                            <md-input-container class=\"md-block  no-margin-bottom\">\n                                <label translate>nvr.description</label>\n                                <textarea ng-model=\"nvr.additionalInfo.description\"></textarea>\n                            </md-input-container>\n                        </md-list-item>\n                    </md-list>\n                </form>\n            </md-content>\n            <md-divider inset></md-divider>\n            <md-content>\n                <div layout=\"row\">\n                    <md-button class=\"md-primary\" ng-disabled=\"theForm.$invalid || !theForm.$dirty\" ng-click=\"save()\">Kaydet</md-button>\n                    <md-button class=\"md-secondary\" ng-click=\"cancel()\">Temizle</md-button>\n                </div>\n            </md-content>\n        </div>\n    </div>",
        "templateCss": ".md-errors-spacer { display: none; }\n.no-margin-bottom { margin-bottom: 0px; }",
        "controllerScript": "const limit = 10;\nconst widgetRootId = 'widget-container-create-nvr';\n\nself.user = undefined;\nself.userService = new UserService($http, $q);\nself.nvrService = new NvrService($http, $q);\nself.customerService = new CustomerService($http, $q);\nself.uiUtils = new UiUtils($mdDialog, $mdToast);\n\nself.onInit = function() {\n\n    self.ctx.$scope.cancel = function() {\n        self.ctx.$scope.nvr = {};\n    }\n    \n    self.ctx.$scope.save = function() {\n        let nvr = self.ctx.$scope.nvr;\n        saveNvr(nvr);\n    }\n\n    getCurrentUser();\n}\n\nfunction getCurrentUser() {\n    self.userService.getCurrentUser(\n        function success(data) {\n            self.user = data;\n            validateUser();\n        },\n        function fail() {\n            self.user = undefined;\n            validateUser();\n        }\n    );\n}\n\nfunction validateUser() {\n    self.ctx.$scope.isValidUser = angular.isDefined(self.user);\n    return self.ctx.$scope.isValidUser;\n}\n\nfunction saveNvr(nvr) {\n    const successCallback = (savedNvr) => {\n        assignNvr(savedNvr, self.user.customerId.id);\n    };\n\n    const failureCallback = () => {\n        self.nvrService.deleteNvr(nvr, function (){},  function() {});\n        showSaveErrorAlert(nvr);\n    };\n\n    self.nvrService.saveNvr(nvr, successCallback, failureCallback);\n}\n\nfunction assignNvr(nvr, customerId) {\n    const successCallback = (assignedNvr) => {\n        showSuccessToast(assignedNvr);\n    };\n\n    const failureCallback = () => {\n        showAssignmentErrorAlert(nvr);\n    };\n\n    self.customerService.assignNvrToCustomer(nvr.id.id, customerId, successCallback, failureCallback);\n}\n\nfunction showSaveErrorAlert(error) {\n    self.uiUtils.showDissmissAlert(\n        'Kayıt Hatası',\n        'NVR oluşturulurken bir hata oluştu. Lütfen tekrar deneyin!',\n        'Tamam'\n    );\n}\n\nfunction showAssignmentErrorAlert(error) {\n    self.uiUtils.showDissmissAlert(\n        'Kayıt Hatası',\n        'Oluşturulan nvr kullanıcıya atanırken bir hata oluştu. Lütfen tekrar deneyin!',\n        'Tamam'\n    );\n}\n\nfunction showSuccessToast(nvr) {\n    self.uiUtils.showSuccessToast(\n        document.getElementById(widgetRootId),\n        nvr.name + ' isimli nvr başarıyla yaratıldı.'\n    );\n}\n\nself.onDestroy = function() {}",
        "settingsSchema": "",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"cardHtml\":\"<div class='card'>HTML code here</div>\",\"cardCss\":\".card {\\n    font-weight: bold;\\n    font-size: 32px;\\n    color: #999;\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\"},\"title\":\"NVR Oluştur\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableCollapse\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}